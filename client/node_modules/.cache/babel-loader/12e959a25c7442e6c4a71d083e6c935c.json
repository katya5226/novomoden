{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/pages/ShoppingCart/OrderPage.jsx\";\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logIn, logOut } from '../../redux/actions';\nimport OrderListing from './OrderListing';\nimport FinishOrderData from './FinishOrderData';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport Bottom from '../../components/Bottom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\nimport NavBar from '../../components/NavBar';\nimport AdSpace from '../../components/AdSpace';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\nclass OrderPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n\n    this.cancelOrder = () => {\n      fetch('/orderroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 1,\n          ids: []\n        })\n      }).then(() => this.setState({\n        canceled: true\n      })).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.removeFromCart = () => {\n      let cart = JSON.parse(window.localStorage.getItem(this.props.loggedInUserId));\n      const adIds = this.state.adIds;\n      adIds.forEach(adId => {\n        cart.splice(cart.indexOf(adId.toString()), 1);\n      });\n      window.localStorage.setItem(this.props.loggedInUserId, JSON.stringify(cart));\n    };\n\n    this.finishOrder = () => {\n      this.setState({\n        loading: true\n      });\n      const price = this.priceSum(this.state.order, this.state.order.length);\n      const postage = this.postageSum(this.state.order, this.state.order.length);\n      fetch('/orderroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 3,\n          order: {\n            ids: this.state.adIds,\n            price: price,\n            postage: postage,\n            seller_id: this.state.order[0].user_id,\n            seller: this.state.order[0].username,\n            status: 0\n          }\n        })\n      }).then(res => res.json()).then(res => {\n        if (res.redirectUrl) {\n          this.setState({\n            redirectUrl: res.redirectUrl,\n            finished: true,\n            loading: false\n          });\n        } else {\n          this.setState({\n            finished: true,\n            error: true\n          });\n        }\n\n        this.removeFromCart();\n      }) // .then(res => {if (res.success) {this.setState({finished: true, loading: false});}\n      //                 else {this.setState({finished: true, error: true});}\n      //                 this.removeFromCart();})\n      .catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.handleOrder = () => {\n      this.setState({\n        orderStatus: 'ORDERED!'\n      });\n    };\n\n    this.priceSum = (order, n) => {\n      let price = 0;\n\n      for (let i = 0; i < n; i++) {\n        price += order[i].price;\n      }\n\n      return price;\n    };\n\n    this.postageSum = (order, n) => {\n      let weight = 0;\n      let postage = 0;\n\n      for (let i = 0; i < n; i++) {\n        weight += order[i].weight;\n      }\n\n      postage = weight / 100 + 1;\n      return postage;\n    };\n\n    this.goToPage = redUrl => {\n      window.location.href = redUrl;\n    };\n\n    this.switchRender = () => {\n      const order = this.state.order;\n      const n = order.length;\n      const price = this.priceSum(order, n);\n      const postage = this.postageSum(order, n);\n      {\n        this.state.redirectUrl !== '' && this.goToPage(this.state.redirectUrl);\n      }\n      /*if (this.state.userId === '0') {\n          return <div style = {{backgroundColor: 'rgb(255,255,255,0.5)'}}>\n              <br/><br/><br/>\n              <h2>PROSIMO PRIJAVITE SE V SISTEM!</h2>\n              <br/><br/><br/>\n          </div>\n      }\n      else if (!n) {\n          return <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                      <br/>\n                      <h1>O NE! NEKAJ JE ŠLO NAROBE. IZDELKI NISO VEČ NA VOLJO.</h1>\n                      <NavLink exact to = '/shoppingcart' className = 'btnb'>NAZAJ NA KOŠARICO</NavLink>\n                      <br/>\n                  </div>\n      }\n      else if (n && !this.state.canceled && !this.state.finished) {\n          return <div style = {{padding: '30px', margin: '0 auto'}}>\n                  <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                      <div style={{textAlign: 'left', paddingLeft: '50px', fontSize: 'Large'}}>\n                          <br/>\n                          <p><b>ODDAJ NAROČILO</b></p>\n                      </div>\n                      <br/>\n                      <div style = {{float: 'left', paddingRight: '100px'}}>\n                          {this.state.order.map(item => <OrderListing key ={item.ad_id} description = {item}/>)}\n                      </div>\n                      <div style = {{textAlign: 'left'}}>\n                      <FinishOrderData/>\n                      <br/>\n                      <p>Cena: {price} €</p>\n                      <p>Cena poštnine: {postage} €</p>\n                      <p style = {{fontWeight: 'bold'}}>Skupaj: {price + postage} €</p>\n                      <button className = 'btnb' onClick = {this.finishOrder}>ZAKLJUČI NAROČILO</button>\n                      <button className = 'btnb' onClick = {this.cancelOrder}>PREKLIČI NAROČILO</button>\n                      <br/>\n                      <ClipLoader\n                          size={50}\n                          color={\"#123abc\"}\n                          loading={this.state.loading}\n                      />\n                      <br/>\n                      <p>{this.state.orderStatus}</p>\n                      </div>\n                      <br/>\n                      <div style = {{clear: 'both'}}>\n                       </div>\n                      <br/>\n                  </div>\n              </div>\n      } else if (this.state.canceled && !this.state.finished) {\n          return <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                      <br/>\n                      <h1>NAROČILO PREKLICANO!</h1>\n                      <NavLink exact to = '/shoppingcart' className = 'btnb'>NAZAJ NA KOŠARICO</NavLink>\n                      <br/>\n                  </div>\n      } else if (this.state.finished && !this.state.canceled) {\n          return <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                      <br/>\n                      {!this.state.error && <h1>NAROČILO ZAKLJUČENO!</h1>}\n                      {this.state.error && <h1>NAPAKA! EDEN ALI VEČ IZDELKOV ŽAL NI VEČ NA VOLJO!</h1>}\n                      <NavLink exact to = '/' className = 'btnb'>DOMOV</NavLink>\n                      <br/>\n                  </div>\n      } else {\n          return <div><br/><br/></div>\n      }*/\n    };\n\n    this.state = {\n      orderStatus: '',\n      adIds: [],\n      order: [],\n      fetching: true,\n      canceled: false,\n      finished: false,\n      error: false,\n      loading: false,\n      userId: '0',\n      redirectUrl: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('/orderroutes', {\n      signal: this.abortController.signal,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        type: 2\n      })\n    }).then(res => res.json()).then(res => {\n      const adIds = JSON.parse(res);\n      this.setState({\n        adIds\n      });\n      adIds.length && fetch('/cartListings', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(adIds)\n      }).then(res => res.json()).then(res => {\n        this.setState({\n          order: res\n        });\n      }) //.then(res => console.log(res))\n      .catch(e => console.error(\"Critical failure: \" + e.message));\n    }).catch(e => console.error(\"Critical failure: \" + e.message));\n    fetch('/sessionroutes', {\n      signal: this.abortController.signal\n    }).then(res => res.json()).then(res => this.setState({\n      userId: res.userId\n    })).catch(e => console.error(\"Critical failure: \" + e.message));\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(UpperLine, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(BreadCrumbs, {\n      pathname: this.props.location.pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }), this.state.redirectUrl !== '' && this.goToPage(this.state.redirectUrl), /*#__PURE__*/React.createElement(AdSpace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Bottom, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state.loggedInUser,\n    loggedInUserId: state.loggedInUserId\n  };\n};\n\nconst mapDispatchToProps = {\n  logIn: logIn,\n  logOut: logOut\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderPage);","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/pages/ShoppingCart/OrderPage.jsx"],"names":["React","NavLink","connect","logIn","logOut","OrderListing","FinishOrderData","UpperLine","Header","Bottom","BreadCrumbs","NavBar","AdSpace","ClipLoader","OrderPage","Component","constructor","props","abortController","AbortController","cancelOrder","fetch","signal","method","headers","body","JSON","stringify","type","ids","then","setState","canceled","catch","e","console","error","message","removeFromCart","cart","parse","window","localStorage","getItem","loggedInUserId","adIds","state","forEach","adId","splice","indexOf","toString","setItem","finishOrder","loading","price","priceSum","order","length","postage","postageSum","seller_id","user_id","seller","username","status","res","json","redirectUrl","finished","handleOrder","orderStatus","n","i","weight","goToPage","redUrl","location","href","switchRender","fetching","userId","componentDidMount","componentWillUnmount","abort","render","pathname","mapStateToProps","loggedInUser","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logIn, logOut } from '../../redux/actions';\nimport OrderListing from './OrderListing';\nimport FinishOrderData from './FinishOrderData';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport Bottom from '../../components/Bottom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\nimport NavBar from '../../components/NavBar';\nimport AdSpace from '../../components/AdSpace';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\n\nclass OrderPage extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            orderStatus: '',\n            adIds: [],\n            order: [],\n            fetching: true,\n            canceled: false,\n            finished: false,\n            error: false,\n            loading: false,\n            userId: '0',\n            redirectUrl: ''\n        };\n    }\n\n    abortController = new AbortController();\n\n    componentDidMount() {\n        fetch('/orderroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 2,\n            })\n        }).then(res => res.json())\n            .then(res => { const adIds = JSON.parse(res); this.setState({adIds});\n                (adIds.length) && fetch('/cartListings', {\n                                    signal: this.abortController.signal,\n                                    method: 'POST',\n                                    headers: {\n                                        'Content-Type': 'application/json',\n                                        'Accept': 'application/json'\n                                    },\n                                    body: JSON.stringify(adIds)\n                                }).then(res => res.json())\n                                    .then(res => {this.setState({order: res})})\n                                    //.then(res => console.log(res))\n                                    .catch(e => console.error(\"Critical failure: \" + e.message));})\n            .catch(e => console.error(\"Critical failure: \" + e.message));\n\n        fetch('/sessionroutes', {signal: this.abortController.signal})\n        .then(res => res.json())\n        .then(res => this.setState({userId: res.userId}))\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    cancelOrder = () => {\n        fetch('/orderroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 1,\n                ids: []\n            })\n        }).then(() => this.setState({canceled: true}))\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    removeFromCart = () => {\n        let cart = JSON.parse(window.localStorage.getItem(this.props.loggedInUserId));\n        const adIds = this.state.adIds;\n        adIds.forEach(adId => {\n            cart.splice(cart.indexOf(adId.toString()), 1);\n        })\n        window.localStorage.setItem(this.props.loggedInUserId, JSON.stringify(cart));\n    }\n\n    finishOrder = () => {\n        this.setState({loading: true});\n        const price = this.priceSum(this.state.order, this.state.order.length);\n        const postage = this.postageSum(this.state.order, this.state.order.length);\n        fetch('/orderroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 3,\n                order: {\n                    ids: this.state.adIds,\n                    price: price,\n                    postage: postage,\n                    seller_id: this.state.order[0].user_id,\n                    seller: this.state.order[0].username,\n                    status: 0\n                }\n\n            })\n        }).then(res => res.json())\n        .then(res => {if (res.redirectUrl) {this.setState({redirectUrl: res.redirectUrl, finished: true, loading: false});}\n        else {this.setState({finished: true, error: true});}\n        this.removeFromCart();})\n        // .then(res => {if (res.success) {this.setState({finished: true, loading: false});}\n        //                 else {this.setState({finished: true, error: true});}\n        //                 this.removeFromCart();})\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    componentWillUnmount() {\n        this.abortController.abort();\n    }\n\n    handleOrder = () => {\n        this.setState({orderStatus: 'ORDERED!'});\n    }\n\n    priceSum = (order, n) => {\n        let price = 0;\n        for (let i = 0; i < n; i++) {\n            price += order[i].price;\n        }\n        return price;\n    }\n    postageSum = (order, n) => {\n        let weight = 0;\n        let postage = 0;\n        for (let i = 0; i < n; i++) {\n            weight += order[i].weight;\n        }\n        postage = weight/100 +1;\n        return postage;\n    }\n\n    goToPage = (redUrl) => {\n        window.location.href = redUrl;\n    }\n\n    switchRender = () => {\n\n        const order = this.state.order;\n        const n = order.length;\n        const price = this.priceSum(order, n);\n        const postage = this.postageSum(order, n);\n\n        {this.state.redirectUrl !== '' && this.goToPage(this.state.redirectUrl)}\n\n        /*if (this.state.userId === '0') {\n            return <div style = {{backgroundColor: 'rgb(255,255,255,0.5)'}}>\n                <br/><br/><br/>\n                <h2>PROSIMO PRIJAVITE SE V SISTEM!</h2>\n                <br/><br/><br/>\n            </div>\n        }\n        else if (!n) {\n            return <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                        <br/>\n                        <h1>O NE! NEKAJ JE ŠLO NAROBE. IZDELKI NISO VEČ NA VOLJO.</h1>\n                        <NavLink exact to = '/shoppingcart' className = 'btnb'>NAZAJ NA KOŠARICO</NavLink>\n                        <br/>\n                    </div>\n        }\n        else if (n && !this.state.canceled && !this.state.finished) {\n            return <div style = {{padding: '30px', margin: '0 auto'}}>\n                    <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                        <div style={{textAlign: 'left', paddingLeft: '50px', fontSize: 'Large'}}>\n                            <br/>\n                            <p><b>ODDAJ NAROČILO</b></p>\n                        </div>\n                        <br/>\n                        <div style = {{float: 'left', paddingRight: '100px'}}>\n                            {this.state.order.map(item => <OrderListing key ={item.ad_id} description = {item}/>)}\n                        </div>\n                        <div style = {{textAlign: 'left'}}>\n                        <FinishOrderData/>\n                        <br/>\n                        <p>Cena: {price} €</p>\n                        <p>Cena poštnine: {postage} €</p>\n                        <p style = {{fontWeight: 'bold'}}>Skupaj: {price + postage} €</p>\n                        <button className = 'btnb' onClick = {this.finishOrder}>ZAKLJUČI NAROČILO</button>\n                        <button className = 'btnb' onClick = {this.cancelOrder}>PREKLIČI NAROČILO</button>\n                        <br/>\n                        <ClipLoader\n                            size={50}\n                            color={\"#123abc\"}\n                            loading={this.state.loading}\n                        />\n                        <br/>\n                        <p>{this.state.orderStatus}</p>\n                        </div>\n                        <br/>\n                        <div style = {{clear: 'both'}}>\n\n                        </div>\n                        <br/>\n                    </div>\n                </div>\n        } else if (this.state.canceled && !this.state.finished) {\n            return <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                        <br/>\n                        <h1>NAROČILO PREKLICANO!</h1>\n                        <NavLink exact to = '/shoppingcart' className = 'btnb'>NAZAJ NA KOŠARICO</NavLink>\n                        <br/>\n                    </div>\n        } else if (this.state.finished && !this.state.canceled) {\n            return <div style = {{backgroundColor: 'rgb(255,255,255,0.7)', margin:'0 auto'}}>\n                        <br/>\n                        {!this.state.error && <h1>NAROČILO ZAKLJUČENO!</h1>}\n                        {this.state.error && <h1>NAPAKA! EDEN ALI VEČ IZDELKOV ŽAL NI VEČ NA VOLJO!</h1>}\n                        <NavLink exact to = '/' className = 'btnb'>DOMOV</NavLink>\n                        <br/>\n                    </div>\n        } else {\n            return <div><br/><br/></div>\n        }*/\n\n    }\n\n    render() {\n        return <div className=\"App\">\n                    <UpperLine/>\n                    <Header/>\n                    <NavBar/>\n                    <BreadCrumbs pathname = {this.props.location.pathname}/>\n                    {this.state.redirectUrl !== '' && this.goToPage(this.state.redirectUrl)}\n                    <AdSpace/>\n                    <Bottom/>\n                </div>\n  \n    }\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n      loggedInUser: state.loggedInUser,\n      loggedInUserId: state.loggedInUserId\n    };\n  };\n  \n  const mapDispatchToProps = {\n    logIn: logIn,\n    logOut: logOut\n  };\n\nexport default connect(mapStateToProps, mapDispatchToProps) (OrderPage);\n"]},"metadata":{},"sourceType":"module"}