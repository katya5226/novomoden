{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/pages/Chat/ChatPage.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport { NavLink } from 'react-router-dom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\nimport NavBar from '../../components/NavBar';\nimport Bottom from '../../components/Bottom';\nimport AdSpace from '../../components/AdSpace';\nimport '../../App.css';\n\nclass ChatPage extends Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n\n    this.conversationsFetch = () => {\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 3\n        })\n      }).then(res => res.json()).then(res => {\n        this.setState({\n          conversations: res\n        }, () => console.log(this.state.conversations));\n        this.setState(state => {\n          let unread = [];\n\n          for (let i = 0; i < res.length; i++) unread.concat(0);\n\n          return { ...state,\n            unread\n          };\n        });\n\n        if (res) {\n          for (let i = 0; i < res.length; i++) {\n            let iLId = 0;\n            res[i].id1 === this.props.loggedInUserId ? iLId = res[i].id2 : iLId = res[i].id1;\n            this.fetchNumberOfUnreadNew(i, iLId);\n          }\n        }\n      }).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.fetchNumberOfUnread = (i, iLId) => {\n      console.log(\"Fetching\");\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 6,\n          iLId: iLId\n        })\n      }).then(res => res.json()).then(res => {\n        console.log(res);\n        this.setState(state => {\n          const unread = state.unread.concat(res);\n          return { ...state,\n            unread\n          };\n        });\n      }).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.fetchNumberOfUnreadNew = (i, iLId) => {\n      console.log(\"Fetching\");\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 6,\n          iLId: iLId\n        })\n      }).then(res => res.json()).then(res => {\n        console.log(res);\n        this.setState(state => {\n          const unread = state.unread.map((num, j) => {\n            if (j === i) {\n              return res;\n            } else return num;\n          });\n          return { ...state,\n            unread\n          };\n        });\n      }).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.switchRender = () => {\n      if (this.state.userId === '0') {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            backgroundColor: 'rgb(255,255,255,0.5)'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 22\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 27\n          }\n        }), /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }\n        }, \"PROSIMO PRIJAVITE SE V SISTEM!\"), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 22\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 27\n          }\n        }));\n      } else return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: 'rgb(255, 255, 255, 0.5)',\n          textAlign: 'left',\n          paddingLeft: '100px',\n          paddingBottom: '50px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }, \"POGOVORI:\"), console.log(this.state.unread), this.state.conversations.map((conv, index) => {\n        let iLId = 0;\n        let conversant = '';\n        conv.id1 === parseInt(this.props.loggedInUserId) ? iLId = conv.id2 : iLId = conv.id1;\n        conv.conversant1 === this.props.loggedInUser ? conversant = conv.conversant2 : conversant = conv.conversant1;\n        let numunread = '';\n        if (this.state.unread[index]) numunread = '(' + this.state.unread[index] + ')';\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          style: {\n            listStyleType: 'none',\n            paddingLeft: '200px',\n            paddingTop: '10px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(NavLink, {\n          style: {\n            color: 'black',\n            textTransform: 'uppercase',\n            fontWeight: 'bold'\n          },\n          exact: true,\n          to: '/chatpage/conversation?' + iLId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }\n        }, conversant + numunread));\n      }));\n    };\n\n    this.state = {\n      userId: '0',\n      conversations: [],\n      unread: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('/sessionroutes', {\n      signal: this.abortController.signal\n    }).then(res => res.json()).then(res => this.setState({\n      userId: res.userId\n    }, () => console.log(this.state.userId))).catch(e => console.error(\"Critical failure: \" + e.message));\n    this.conversationsFetch();\n    this.interval = setInterval(() => {\n      this.conversationsFetch();\n    }, 30000);\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UpperLine, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(BreadCrumbs, {\n      pathname: this.props.location.pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }), this.switchRender(), /*#__PURE__*/React.createElement(AdSpace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Bottom, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state.loggedInUser,\n    loggedInUserId: state.loggedInUserId\n  };\n};\n\nexport default connect(mapStateToProps)(ChatPage);","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/pages/Chat/ChatPage.jsx"],"names":["React","Component","connect","UpperLine","Header","NavLink","BreadCrumbs","NavBar","Bottom","AdSpace","ChatPage","constructor","props","abortController","AbortController","conversationsFetch","fetch","signal","method","headers","body","JSON","stringify","type","then","res","json","setState","conversations","console","log","state","unread","i","length","concat","iLId","id1","loggedInUserId","id2","fetchNumberOfUnreadNew","catch","e","error","message","fetchNumberOfUnread","map","num","j","switchRender","userId","backgroundColor","textAlign","paddingLeft","paddingBottom","conv","index","conversant","parseInt","conversant1","loggedInUser","conversant2","numunread","listStyleType","paddingTop","color","textTransform","fontWeight","componentDidMount","interval","setInterval","componentWillUnmount","abort","clearInterval","render","location","pathname","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport { NavLink } from 'react-router-dom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\nimport NavBar from '../../components/NavBar';\nimport Bottom from '../../components/Bottom';\nimport AdSpace from '../../components/AdSpace';\nimport '../../App.css';\n\n\nclass ChatPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n        this.state = {\n            userId: '0',\n            conversations: [],\n            unread: []\n        }\n    }\n\n    abortController = new AbortController();\n    componentDidMount() {\n\n        fetch('/sessionroutes', {signal: this.abortController.signal})\n        .then(res => res.json())\n        .then(res => this.setState({userId: res.userId}, () => console.log(this.state.userId)))\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n\n        this.conversationsFetch();\n        this.interval = setInterval(() => {this.conversationsFetch();}, 30000);\n    }\n\n    componentWillUnmount() {\n        this.abortController.abort();\n        clearInterval(this.interval);\n    }\n\n    conversationsFetch = () => {\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 3\n            })\n        })\n        .then(res => res.json())\n        .then(res => {this.setState({conversations: res}, () => console.log(this.state.conversations));\n        this.setState(state => {let unread = []; for(let i = 0; i < res.length; i++) unread.concat(0); return {...state, unread}})\n         if(res) {\n            for(let i = 0; i < res.length; i++) {\n                let iLId = 0;\n                res[i].id1 === this.props.loggedInUserId ? iLId = res[i].id2 : iLId = res[i].id1;\n                this.fetchNumberOfUnreadNew(i, iLId);\n            }\n         }\n        })\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n\n    fetchNumberOfUnread = (i, iLId) => {\n        console.log(\"Fetching\");\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 6,\n                iLId: iLId\n            })\n        })\n        .then(res => res.json())\n        .then(res => {console.log(res); this.setState(state => {\n                                        const unread = state.unread.concat(res);\n                                        return {...state, unread }; });                          \n        })\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    fetchNumberOfUnreadNew = (i, iLId) => {\n        console.log(\"Fetching\");\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 6,\n                iLId: iLId\n            })\n        })\n        .then(res => res.json())\n        .then(res => {console.log(res); this.setState(state => {\n                                            const unread = state.unread.map((num, j) => {if (j === i) {return res;} else return num;});\n                                            return ({...state, unread});\n                                        });                    \n        })\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    switchRender = () => {\n        if (this.state.userId === '0') {\n            return <div style = {{backgroundColor: 'rgb(255,255,255,0.5)'}}>\n                <br/><br/><br/>\n                <h2>PROSIMO PRIJAVITE SE V SISTEM!</h2>\n                <br/><br/><br/>\n            </div>\n        }\n        else return <div style = {{backgroundColor: 'rgb(255, 255, 255, 0.5)', textAlign: 'left', paddingLeft: '100px', paddingBottom: '50px'}}>\n            <br/>\n            <h2>POGOVORI:</h2>\n            {console.log(this.state.unread)}\n            {this.state.conversations.map((conv, index) => {\n                let iLId = 0;\n                let conversant = '';\n                conv.id1 === parseInt(this.props.loggedInUserId) ? iLId = conv.id2 : iLId = conv.id1;\n                conv.conversant1 === this.props.loggedInUser ? conversant = conv.conversant2 : conversant = conv.conversant1;\n                let numunread = '';\n                if(this.state.unread[index]) numunread = '(' + this.state.unread[index] + ')';\n                return <li key = {index} style = {{listStyleType: 'none', paddingLeft: '200px', paddingTop: '10px'}}>\n                        <NavLink style = {{color: 'black', textTransform: 'uppercase', fontWeight: 'bold'}} exact to = {'/chatpage/conversation?' + iLId}>{conversant + numunread}</NavLink>\n                    </li>\n            })}\n        </div>\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n            <UpperLine/>\n            <Header/>\n            <NavBar/>\n            <BreadCrumbs pathname = {this.props.location.pathname}/>\n            {this.switchRender()}\n            <AdSpace/>\n            <Bottom/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      loggedInUser: state.loggedInUser,\n      loggedInUserId: state.loggedInUserId\n    };\n};\n\nexport default connect(mapStateToProps) (ChatPage)"]},"metadata":{},"sourceType":"module"}