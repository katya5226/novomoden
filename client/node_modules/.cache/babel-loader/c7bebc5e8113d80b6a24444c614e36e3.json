{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/pages/Publish/ImgUpload.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport ReactCrop from 'react-image-crop';\nimport Resizer from 'react-image-file-resizer';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport '../../App.css';\n\nclass ImgUpload extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        var fileName, fileExtension;\n        fileName = e.target.files[0].name; //console.log(\"fileName: \" + fileName);\n\n        fileExtension = fileName.replace(/^.*\\./, ''); //console.log(\"fileExtension: \" + fileExtension);\n\n        if (fileExtension === 'png' || fileExtension === 'jpg' || fileExtension === 'jpeg') {\n          this.readImageFile(e.target.files[0]);\n          Resizer.imageFileResizer(e.target.files[0], 450, 600, 'JPEG', 100, 0, uri => {\n            this.setState({\n              src: uri\n            });\n          }, 'base64');\n          this.setState({\n            file: e.target.files[0]\n          });\n          this.setState({\n            cropUrl: null\n          });\n        } else {\n          this.setState({\n            warning: 'Slika mora biti formata jpg, jpeg ali png!'\n          });\n        }\n      }\n    };\n\n    this.readImageFile = file => {\n      const reader = new FileReader();\n      let w;\n      let h;\n      var self = this;\n\n      reader.onload = function (e) {\n        let img = new Image();\n        img.src = e.target.result;\n\n        img.onload = function () {\n          w = this.width;\n          h = this.height;\n          console.log( //'Name: ' + file.name + '\\n' +\n          'File Extension: ' + file.name.replace(/^.*\\./, '') + '\\n' + //'Size: ' + Math.round((file.size / 1024)) + ' KB\\n' +\n          'Width: ' + w + '\\n' + 'Height: ' + h + '\\n' //'Type: ' + file.type + '\\n' +\n          //'Last Modified: ' + file.lastModifiedDate + '\\n'\n          );\n\n          if (w < 450 || h < 600) {\n            self.setState({\n              warning: 'Premajhna slika. Minimalna veikost slike je 450x600 px.'\n            });\n          } else self.setState({\n            warning: ''\n          });\n        };\n      };\n\n      reader.readAsDataURL(file);\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n      this.setState({\n        dimensions: {\n          height: image.offsetHeight,\n          width: image.offsetWidth\n        }\n      });\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      //this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n\n    this.saveCrop = () => {\n      if (this.state.warning === '') {\n        this.setState({\n          cropUrl: this.state.croppedImageUrl,\n          src: '',\n          croppedImageUrl: ''\n        });\n        const photo = {\n          file: this.state.file,\n          crop: this.state.crop\n        };\n        this.props.callBackParent(photo, parseInt(this.props.index));\n      }\n    };\n\n    this.state = {\n      crop: {\n        unit: '%',\n        aspect: 3 / 4,\n        width: 50\n      },\n      src: null,\n      croppedImageUrl: '',\n      cropUrl: null,\n      file: null,\n      dimensions: {\n        height: 0,\n        width: 0\n      },\n      warning: ''\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const {\n      crop,\n      src\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chosen_photos\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"input1\",\n      type: \"file\",\n      onChange: this.onSelectFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, src && /*#__PURE__*/React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      ruleOfThirds: true,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, this.state.warning), !this.state.cropUrl && src && /*#__PURE__*/React.createElement(\"button\", {\n      id: \"1\",\n      className: \"btnb\",\n      onClick: this.saveCrop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 50\n      }\n    }, \"SHRANI SLIKO\"), this.state.cropUrl && /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"Crop1\",\n      style: {\n        width: '200px'\n      },\n      src: this.state.cropUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 40\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state.loggedInUser,\n    loggedInUserId: state.loggedInUserId\n  };\n};\n\nexport default connect(mapStateToProps)(ImgUpload);","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/pages/Publish/ImgUpload.jsx"],"names":["React","axios","connect","ReactCrop","Resizer","ImgUpload","PureComponent","constructor","props","onSelectFile","e","target","files","length","fileName","fileExtension","name","replace","readImageFile","imageFileResizer","uri","setState","src","file","cropUrl","warning","reader","FileReader","w","h","self","onload","img","Image","result","width","height","console","log","readAsDataURL","onImageLoaded","image","imageRef","dimensions","offsetHeight","offsetWidth","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","saveCrop","state","croppedImageUrl","photo","callBackParent","parseInt","index","unit","aspect","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","error","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","color","mapStateToProps","loggedInUser","loggedInUserId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport ReactCrop from 'react-image-crop';\nimport Resizer from 'react-image-file-resizer';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport '../../App.css';\n\n\nclass ImgUpload extends React.PureComponent {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            crop: {\n                unit: '%',\n                aspect: 3 / 4,\n                width: 50\n            },\n            src: null,\n            croppedImageUrl: '',\n            cropUrl: null,\n            file: null,\n            dimensions: {\n                height: 0,\n                width: 0\n            },\n            warning: ''\n        };\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n\n            var fileName, fileExtension;\n            \n            fileName = e.target.files[0].name;\n            //console.log(\"fileName: \" + fileName);\n            fileExtension = fileName.replace(/^.*\\./, '');\n            //console.log(\"fileExtension: \" + fileExtension);\n\n            if (fileExtension === 'png' || fileExtension === 'jpg' || fileExtension === 'jpeg') {\n                this.readImageFile(e.target.files[0]);\n            \n                Resizer.imageFileResizer(\n                    e.target.files[0],\n                    450,\n                    600,\n                    'JPEG',\n                    100,\n                    0,\n                    uri => {\n                        this.setState({src: uri});\n                    },\n                    'base64'\n                );\n\n                this.setState({file: e.target.files[0]});\n                this.setState({cropUrl: null});\n            } else {this.setState({warning: 'Slika mora biti formata jpg, jpeg ali png!'})}\n        }\n    };\n\n    readImageFile = (file) => {\n        const reader = new FileReader();\n\n        let w;\n        let h;\n        var self = this;\n\n        reader.onload = function (e) {\n            let img = new Image();      \n            img.src = e.target.result;\n\n            img.onload = function () {\n                w = this.width;\n                h = this.height;\n                console.log(\n                        //'Name: ' + file.name + '\\n' +\n                        'File Extension: ' + file.name.replace(/^.*\\./, '') + '\\n' +\n                        //'Size: ' + Math.round((file.size / 1024)) + ' KB\\n' +\n                        'Width: ' + w + '\\n' +\n                        'Height: ' + h + '\\n'\n                        //'Type: ' + file.type + '\\n' +\n                        //'Last Modified: ' + file.lastModifiedDate + '\\n'\n                        );\n                if (w < 450 || h < 600) {\n                    self.setState({warning: 'Premajhna slika. Minimalna veikost slike je 450x600 px.'});\n                } else self.setState({warning: ''});\n            }\n        };\n        reader.readAsDataURL(file);\n    }\n\n\n\n    onImageLoaded = image => {\n        this.imageRef = image;\n        this.setState({dimensions:{height:image.offsetHeight,\n            width:image.offsetWidth}});\n    };\n    \n    onCropComplete = crop => {\n        this.makeClientCrop(crop);\n    };\n    \n    onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        //this.setState({ crop: percentCrop });\n        this.setState({ crop });\n    };\n\n    async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n            const croppedImageUrl = await this.getCroppedImg(\n                this.imageRef,\n                crop,\n                'newFile.jpeg'\n            );\n            this.setState({ croppedImageUrl });\n        }\n    }\n\n    getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n            if (!blob) {\n                //reject(new Error('Canvas is empty'));\n                console.error('Canvas is empty');\n                return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(this.fileUrl);\n            this.fileUrl = window.URL.createObjectURL(blob);\n            resolve(this.fileUrl);\n            }, 'image/jpeg');\n        });\n    }\n\n    saveCrop = () => {\n        if(this.state.warning === '') {\n            this.setState({cropUrl: this.state.croppedImageUrl, src: '', croppedImageUrl: ''});\n            const photo = {file: this.state.file, crop: this.state.crop};\n            this.props.callBackParent(photo, parseInt(this.props.index));\n        }\n    }\n\n    render() {\n\n        const { crop, src } = this.state;\n        return (\n            <>\n            <div className=\"chosen_photos\">\n                <input id=\"input1\" type=\"file\" onChange={this.onSelectFile} />\n                <br/>\n                <br/>\n            </div>\n            <div>\n                {src && (\n                <ReactCrop\n                    src={src}\n                    crop={crop}\n                    ruleOfThirds\n                    onImageLoaded={this.onImageLoaded}\n                    onComplete={this.onCropComplete}\n                    onChange={this.onCropChange}\n                />\n                )}\n                <p style={{ color: 'red' }}>{this.state.warning}</p>\n                {(!this.state.cropUrl && src) && <button id='1' className = 'btnb' onClick={this.saveCrop}>SHRANI SLIKO</button>}\n                {this.state.cropUrl && <img alt=\"Crop1\" style={{ width: '200px' }} src={this.state.cropUrl}/>}\n            </div>\n            </>\n\n        );\n\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n      loggedInUser: state.loggedInUser,\n      loggedInUserId: state.loggedInUserId\n    };\n  };\n\nexport default connect(mapStateToProps) (ImgUpload);\n"]},"metadata":{},"sourceType":"module"}