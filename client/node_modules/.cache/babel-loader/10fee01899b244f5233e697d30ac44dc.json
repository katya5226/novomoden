{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/pages/Publish/CropImage.jsx\";\nimport React from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport '../../App.css';\n\nclass CropImage extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }), false);\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      files: [],\n      urls: [],\n      fileWarning: '',\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      },\n      croppedImageUrl: null\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n  /*imageChange(event) {\n          if(event.target.files[0]) {\n              const newFiles = Array.from(event.target.files)\n              if((newFiles.length + this.state.files.length) > 6) {\n                  this.setState({fileWarning: \"Izberete lahko največ 6 datotek.\"})\n              }else {\n                  this.setState({fileWarning: \"\"})\n                  var array1 = [...this.state.urls];\n                  var array2 = [...this.state.files];\n                  const newUrls = newFiles.map(file => URL.createObjectURL(file));\n                  var urls = newUrls.concat(array1);\n                  var files = newFiles.concat(array2);\n                  this.setState({files, urls});\n              }\n          }\n      }*/\n\n  /*deleteImg(event) {\n      const i = event.target.id;\n      var array1 = [...this.state.urls];\n      array1.splice(i, 1);\n      this.setState({urls: array1});\n      var array2 = [...this.state.files];\n      array2.splice(i,1);\n      this.setState({files: array2})\n  }*/\n\n\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.onSelectFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    })), src && /*#__PURE__*/React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      ruleOfThirds: true,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }), croppedImageUrl && /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"Crop\",\n      style: {\n        maxWidth: '100%'\n      },\n      src: croppedImageUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, croppedImageUrl));\n  }\n\n}\n\nexport default CropImage;","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/pages/Publish/CropImage.jsx"],"names":["React","ReactCrop","CropImage","PureComponent","constructor","props","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","state","urls","fileWarning","unit","width","aspect","croppedImageUrl","height","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport '../../App.css';\n\n\nclass CropImage extends React.PureComponent {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            files: [],\n            urls: [],\n            fileWarning: '',\n            src: null,\n            crop: {\n                unit: '%',\n                width: 30,\n                aspect: 16 / 9,\n            },\n            croppedImageUrl: null\n        };\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n          const reader = new FileReader();\n          reader.addEventListener('load', () =>\n            this.setState({ src: reader.result }),\n            false\n          );\n          reader.readAsDataURL(e.target.files[0]);\n        }\n      };\n\n      // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n    /*imageChange(event) {\n            if(event.target.files[0]) {\n                const newFiles = Array.from(event.target.files)\n                if((newFiles.length + this.state.files.length) > 6) {\n                    this.setState({fileWarning: \"Izberete lahko največ 6 datotek.\"})\n                }else {\n                    this.setState({fileWarning: \"\"})\n                    var array1 = [...this.state.urls];\n                    var array2 = [...this.state.files];\n                    const newUrls = newFiles.map(file => URL.createObjectURL(file));\n                    var urls = newUrls.concat(array1);\n                    var files = newFiles.concat(array2);\n                    this.setState({files, urls});\n                }\n            }\n        }*/\n\n    /*deleteImg(event) {\n        const i = event.target.id;\n        var array1 = [...this.state.urls];\n        array1.splice(i, 1);\n        this.setState({urls: array1});\n        var array2 = [...this.state.files];\n        array2.splice(i,1);\n        this.setState({files: array2})\n    }*/\n\n    render() {\n\n        const { crop, croppedImageUrl, src } = this.state;\n\n        return (\n            <div className=\"App\">\n            <div>\n              <input type=\"file\" onChange={this.onSelectFile} />\n            </div>\n            {src && (\n              <ReactCrop\n                src={src}\n                crop={crop}\n                ruleOfThirds\n                onImageLoaded={this.onImageLoaded}\n                onComplete={this.onCropComplete}\n                onChange={this.onCropChange}\n              />\n            )}\n            {croppedImageUrl && (\n              <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n            )}\n            <p>{croppedImageUrl}</p>\n          </div>\n\n        );\n\n    }\n\n}\n\nexport default CropImage;\n"]},"metadata":{},"sourceType":"module"}