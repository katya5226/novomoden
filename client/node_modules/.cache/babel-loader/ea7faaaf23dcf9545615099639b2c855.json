{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/pages/Chat/ChatPage.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport { NavLink } from 'react-router-dom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\nimport NavBar from '../../components/NavBar';\nimport Bottom from '../../components/Bottom';\nimport AdSpace from '../../components/AdSpace';\nimport '../../App.css';\n\nclass ChatPage extends Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n\n    this.fetchNumberOfUnread = iLId => {\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 6,\n          iLId: iLId\n        })\n      }).then(res => res.json()).then(res => {\n        this.setState(state => {\n          const unread = state.unread.concat(res);\n          return { ...state,\n            unread\n          };\n        });\n      }).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.switchRender = () => {\n      if (this.state.userId === '0') {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            backgroundColor: 'rgb(255,255,255,0.5)'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 22\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 27\n          }\n        }), /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        }, \"PROSIMO PRIJAVITE SE V SISTEM!\"), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 22\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 27\n          }\n        }));\n      } else return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: 'rgb(255, 255, 255, 0.5)',\n          textAlign: 'left',\n          paddingLeft: '100px',\n          paddingBottom: '50px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, \"POGOVORI:\"), this.state.conversations.map((conv, index) => {\n        let iLId = 0;\n        let conversant = '';\n        console.log(this.props.loggedInUserId);\n        conv.id1 === this.props.loggedInUserId ? iLId = conv.id2 : iLId = conv.id1;\n        console.log(\"SOGOVORNIK: \" + iLId);\n        conv.conversant1 === this.props.loggedInUser ? conversant = conv.conversant2 : conversant = conv.conversant1;\n        let numunread = '';\n        if (this.state.unread[index]) numunread = '(' + this.state.unread[index] + ')';\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          style: {\n            listStyleType: 'none',\n            paddingLeft: '200px',\n            paddingTop: '10px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(NavLink, {\n          style: {\n            color: 'black',\n            textTransform: 'uppercase',\n            fontWeight: 'bold'\n          },\n          exact: true,\n          to: '/chatpage/conversation?' + iLId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }\n        }, conversant + numunread));\n      }));\n    };\n\n    this.state = {\n      userId: '0',\n      conversations: [],\n      unread: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('/sessionroutes', {\n      signal: this.abortController.signal\n    }).then(res => res.json()).then(res => this.setState({\n      userId: res.userId\n    }, () => console.log(this.state.userId))).catch(e => console.error(\"Critical failure: \" + e.message));\n    fetch('/messageroutes', {\n      signal: this.abortController.signal,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        type: 3\n      })\n    }).then(res => res.json()).then(res => {\n      this.setState({\n        conversations: res\n      }, () => console.log(this.state.conversations));\n\n      if (res) {\n        for (let i = 0; i < res.length; i++) {\n          let iLId = 0;\n          res[i].id1 === this.props.loggedInUserId ? iLId = res[i].id2 : iLId = res[i].id1;\n          this.fetchNumberOfUnread(iLId);\n        }\n      }\n    }).catch(e => console.error(\"Critical failure: \" + e.message));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UpperLine, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(BreadCrumbs, {\n      pathname: this.props.location.pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }), this.switchRender(), /*#__PURE__*/React.createElement(AdSpace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Bottom, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state.loggedInUser,\n    loggedInUserId: state.loggedInUserId\n  };\n};\n\nexport default connect(mapStateToProps)(ChatPage);","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/pages/Chat/ChatPage.jsx"],"names":["React","Component","connect","UpperLine","Header","NavLink","BreadCrumbs","NavBar","Bottom","AdSpace","ChatPage","constructor","props","abortController","AbortController","fetchNumberOfUnread","iLId","fetch","signal","method","headers","body","JSON","stringify","type","then","res","json","setState","state","unread","concat","catch","e","console","error","message","switchRender","userId","backgroundColor","textAlign","paddingLeft","paddingBottom","conversations","map","conv","index","conversant","log","loggedInUserId","id1","id2","conversant1","loggedInUser","conversant2","numunread","listStyleType","paddingTop","color","textTransform","fontWeight","componentDidMount","i","length","render","location","pathname","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport { NavLink } from 'react-router-dom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\nimport NavBar from '../../components/NavBar';\nimport Bottom from '../../components/Bottom';\nimport AdSpace from '../../components/AdSpace';\nimport '../../App.css';\n\n\nclass ChatPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n        this.state = {\n            userId: '0',\n            conversations: [],\n            unread: []\n        }\n    }\n\n    abortController = new AbortController();\n    componentDidMount() {\n\n        fetch('/sessionroutes', {signal: this.abortController.signal})\n        .then(res => res.json())\n        .then(res => this.setState({userId: res.userId}, () => console.log(this.state.userId)))\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 3\n            })\n        })\n        .then(res => res.json())\n        .then(res => {this.setState({conversations: res}, () => console.log(this.state.conversations));\n         if(res) {\n            for(let i = 0; i < res.length; i++) {\n                let iLId = 0;\n                res[i].id1 === this.props.loggedInUserId ? iLId = res[i].id2 : iLId = res[i].id1;\n                this.fetchNumberOfUnread(iLId);\n            }\n         }\n        })\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n\n    fetchNumberOfUnread = (iLId) => {\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 6,\n                iLId: iLId\n            })\n        })\n        .then(res => res.json())\n        .then(res => {this.setState(state => {\n                                        const unread = state.unread.concat(res);\n                                        return {...state, unread }; });                          \n        })\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    switchRender = () => {\n        if (this.state.userId === '0') {\n            return <div style = {{backgroundColor: 'rgb(255,255,255,0.5)'}}>\n                <br/><br/><br/>\n                <h2>PROSIMO PRIJAVITE SE V SISTEM!</h2>\n                <br/><br/><br/>\n            </div>\n        }\n        else return <div style = {{backgroundColor: 'rgb(255, 255, 255, 0.5)', textAlign: 'left', paddingLeft: '100px', paddingBottom: '50px'}}>\n            <br/>\n            <h2>POGOVORI:</h2>\n            {this.state.conversations.map((conv, index) => {\n                let iLId = 0;\n                let conversant = '';\n                console.log(this.props.loggedInUserId);\n                conv.id1 === this.props.loggedInUserId ? iLId = conv.id2 : iLId = conv.id1;\n                console.log(\"SOGOVORNIK: \" + iLId);\n                conv.conversant1 === this.props.loggedInUser ? conversant = conv.conversant2 : conversant = conv.conversant1;\n                let numunread = '';\n                if(this.state.unread[index]) numunread = '(' + this.state.unread[index] + ')';\n                return <li key = {index} style = {{listStyleType: 'none', paddingLeft: '200px', paddingTop: '10px'}}>\n                        <NavLink style = {{color: 'black', textTransform: 'uppercase', fontWeight: 'bold'}} exact to = {'/chatpage/conversation?' + iLId}>{conversant + numunread}</NavLink>\n                    </li>\n            })}\n        </div>\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n            <UpperLine/>\n            <Header/>\n            <NavBar/>\n            <BreadCrumbs pathname = {this.props.location.pathname}/>\n            {this.switchRender()}\n            <AdSpace/>\n            <Bottom/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      loggedInUser: state.loggedInUser,\n      loggedInUserId: state.loggedInUserId\n    };\n};\n\nexport default connect(mapStateToProps) (ChatPage)"]},"metadata":{},"sourceType":"module"}