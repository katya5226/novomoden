{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/pages/Chat/Conversation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport NewMsg from './NewMsg';\nimport Sent from './Sent';\nimport '../../App.css';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport NavBar from '../../components/NavBar';\nimport Bottom from '../../components/Bottom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\n\nclass Conversation extends Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n\n    this.interlocutor = iLId => {\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 4,\n          iLId: iLId\n        })\n      }).then(res => res.json()).then(res => this.setState({\n        interlocutor: res[0].first_name\n      })).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.msgFetch = () => {\n      const iLId = this.props.interlocutorId;\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 1,\n          conversantId: iLId\n        })\n      }).then(res => res.json()).then(results => {\n        const messages = results.map(result => ({\n          time: result.date_created,\n          sender: result.sender,\n          msg: result.msg\n        }));\n        this.setState({\n          messages\n        });\n      }).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.sendMsg = newMsg => {\n      this.setState({\n        newMsg\n      });\n      const receiverId = this.interlocutorId();\n      fetch('/messageroutes', {\n        signal: this.abortController.signal,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 2,\n          receiverId: receiverId,\n          msg: newMsg\n        })\n      }).then(res => res.json()).then(res => res.success && this.setState(state => {\n        const messages = [...state.messages, {\n          time: 'now',\n          sender: this.props.loggedInUser,\n          msg: state.newMsg\n        }];\n        return { ...state,\n          messages,\n          newMsg: ''\n        };\n      })).catch(e => console.error(\"Critical failure: \" + e.message));\n    };\n\n    this.state = {\n      time: null,\n      interlocutor: '',\n      messages: [],\n      newMsg: ''\n    };\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n    this.interlocutor(this.interlocutorId());\n  }\n\n  interlocutorId() {\n    function subStrAfterChars(str, char) {\n      return str.substring(str.indexOf(char) + 1);\n    }\n\n    const interlocutorId = subStrAfterChars(window.location.href, '?');\n    return interlocutorId;\n  }\n\n  render() {\n    const interlocutorId = this.interlocutorId();\n    const interlocutor = this.state.interlocutor;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UpperLine, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BreadCrumbs, {\n      pathname: this.props.location.pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Sent, {\n      interlocutorId: interlocutorId,\n      interlocutor: interlocutor,\n      messages: this.state.messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NewMsg, {\n      callBackParent: this.sendMsg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Bottom, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loggedInUser: state.loggedInUser,\n    loggedInUserId: state.loggedInUserId\n  };\n};\n\nexport default connect(mapStateToProps)(Conversation);","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/pages/Chat/Conversation.jsx"],"names":["React","Component","connect","UpperLine","Header","NewMsg","Sent","Redirect","NavLink","NavBar","Bottom","BreadCrumbs","Conversation","constructor","props","abortController","AbortController","interlocutor","iLId","fetch","signal","method","headers","body","JSON","stringify","type","then","res","json","setState","first_name","catch","e","console","error","message","msgFetch","interlocutorId","conversantId","results","messages","map","result","time","date_created","sender","msg","sendMsg","newMsg","receiverId","success","state","loggedInUser","componentWillUnmount","abort","subStrAfterChars","str","char","substring","indexOf","window","location","href","render","pathname","mapStateToProps","loggedInUserId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport UpperLine from '../../components/UpperLine';\nimport Header from '../../components/Header';\nimport NewMsg from './NewMsg';\nimport Sent from './Sent';\nimport '../../App.css';\nimport { Redirect, NavLink } from 'react-router-dom';\nimport NavBar from '../../components/NavBar';\nimport Bottom from '../../components/Bottom';\nimport BreadCrumbs from '../../components/BreadCrumbs';\n\n\nclass Conversation extends Component {\n\tconstructor(props) {\n        super(props);\n        this.state = {\n            time: null,\n            interlocutor: '',\n            messages: [],\n            newMsg: ''\n        }\n    }\n\n    abortController = new AbortController();\n\n    componentWillUnmount() {\n        this.abortController.abort();\n        this.interlocutor(this.interlocutorId());\n    }\n\n    interlocutorId() {\n        function subStrAfterChars(str, char) {\n            return str.substring(str.indexOf(char) + 1);\n        }\n        const interlocutorId = subStrAfterChars(window.location.href, '?');\n        return interlocutorId;\n    }\n\n    interlocutor = (iLId) => {\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 4,\n                iLId: iLId,\n            })\n        }).then(res => res.json())\n        .then(res => this.setState({interlocutor: res[0].first_name}))\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    msgFetch = () => {\n        const iLId = this.props.interlocutorId;\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 1,\n                conversantId: iLId\n            })\n        })\n        .then(res => res.json())\n        .then(results => {\n            const messages = results.map(result => ({time: result.date_created, sender: result.sender, msg: result.msg}));\n            this.setState({messages})\n        })\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    sendMsg = (newMsg) => {\n        this.setState({newMsg})\n        const receiverId = this.interlocutorId();\n        fetch('/messageroutes', {\n            signal: this.abortController.signal,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                type: 2,\n                receiverId: receiverId,\n                msg: newMsg\n            })\n        }).then(res => res.json())\n        .then(res => res.success && this.setState(state => {const messages = [...state.messages, ({time: 'now', sender: this.props.loggedInUser, msg: state.newMsg})]; return {...state, messages, newMsg: ''}}))\n        .catch(e => console.error(\"Critical failure: \" + e.message));\n    }\n\n    render() {\n\n        const interlocutorId = this.interlocutorId();\n        const interlocutor = this.state.interlocutor;\n\n        return (\n            <div className = 'App'>\n                <UpperLine/>\n                <Header/>\n                <NavBar/>\n                <BreadCrumbs pathname = {this.props.location.pathname}/>\n                <Sent interlocutorId = {interlocutorId} interlocutor = {interlocutor} messages = {this.state.messages}/>\n                <NewMsg callBackParent = {this.sendMsg}/>\n                <Bottom/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      loggedInUser: state.loggedInUser,\n      loggedInUserId: state.loggedInUserId\n    };\n};\n\nexport default connect(mapStateToProps) (Conversation)"]},"metadata":{},"sourceType":"module"}