{"ast":null,"code":"var _jsxFileName = \"/home/katja/REACT/test-app/src/components/BreadCrumbs.jsx\";\nimport React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport * as Constants from '../constants';\nimport '../App.css';\n\nconst makeSlovene = word => {\n  let sWord = '';\n\n  for (let i = 0; i < Constants.breadCrumbsConsts.length; i++) {\n    word === Constants.breadCrumbsConsts[i].value && (sWord = Constants.breadCrumbsConsts[i].label);\n\n    if (word.includes('conversation?')) {}\n  }\n\n  return sWord;\n};\n\nconst BreadCrumbs = props => {\n  let linksplit = props.pathname.substr(1).split('/');\n  let links = new Array(linksplit.length).fill('');\n\n  for (let i = 0; i < linksplit.length; i++) {\n    for (let j = 0; j <= i; j++) {\n      links[i] += '/' + linksplit[j];\n    }\n  }\n\n  let n = links.length;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'left',\n      padding: '20px',\n      color: 'white',\n      textShadow: '1px 1px black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/\",\n    style: {\n      color: 'white',\n      textShadow: '1px 1px black',\n      textDecoration: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"domov\"), links.map((link, index) => {\n    if (index !== n - 1) {\n      return /*#__PURE__*/React.createElement(NavLink, {\n        key: index,\n        to: link,\n        style: {\n          color: 'white',\n          textShadow: '1px 1px black',\n          textDecoration: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      }, \" > \", makeSlovene(linksplit[index]));\n    } else return null;\n  }), \"> \", makeSlovene(linksplit[n - 1]));\n};\n\nexport default BreadCrumbs;","map":{"version":3,"sources":["/home/katja/REACT/test-app/src/components/BreadCrumbs.jsx"],"names":["React","NavLink","Constants","makeSlovene","word","sWord","i","breadCrumbsConsts","length","value","label","includes","BreadCrumbs","props","linksplit","pathname","substr","split","links","Array","fill","j","n","textAlign","padding","color","textShadow","textDecoration","map","link","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AACA,OAAO,YAAP;;AAGA,MAAMC,WAAW,GAAIC,IAAD,IAAU;AAE1B,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGJ,SAAS,CAACK,iBAAV,CAA4BC,MAA7C,EAAqDF,CAAC,EAAtD,EAA0D;AACrDF,IAAAA,IAAI,KAAKF,SAAS,CAACK,iBAAV,CAA4BD,CAA5B,EAA+BG,KAAzC,KAAoDJ,KAAK,GAAGH,SAAS,CAACK,iBAAV,CAA4BD,CAA5B,EAA+BI,KAA3F;;AACA,QAAGN,IAAI,CAACO,QAAL,CAAc,eAAd,CAAH,EAAmC,CAElC;AACJ;;AAED,SAAON,KAAP;AACH,CAZD;;AAeA,MAAMO,WAAW,GAAIC,KAAD,IAAW;AAE3B,MAAIC,SAAS,GAAGD,KAAK,CAACE,QAAN,CAAeC,MAAf,CAAsB,CAAtB,EAAyBC,KAAzB,CAA+B,GAA/B,CAAhB;AAEA,MAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUL,SAAS,CAACN,MAApB,EAA4BY,IAA5B,CAAiC,EAAjC,CAAZ;;AAEA,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,SAAS,CAACN,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACvC,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,CAArB,EAAwBe,CAAC,EAAzB,EAA6B;AACzBH,MAAAA,KAAK,CAACZ,CAAD,CAAL,IAAY,MAAMQ,SAAS,CAACO,CAAD,CAA3B;AACH;AACJ;;AAED,MAAIC,CAAC,GAAGJ,KAAK,CAACV,MAAd;AAEA,sBAAO;AAAK,IAAA,KAAK,EAAI;AAACe,MAAAA,SAAS,EAAE,MAAZ;AAAoBC,MAAAA,OAAO,EAAE,MAA7B;AAAqCC,MAAAA,KAAK,EAAE,OAA5C;AAAqDC,MAAAA,UAAU,EAAE;AAAjE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAG,GAAd;AAAkB,IAAA,KAAK,EAAI;AAACD,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,UAAU,EAAE,eAA7B;AAA8CC,MAAAA,cAAc,EAAE;AAA9D,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,EAEET,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpB,QAAIA,KAAK,KAAKR,CAAC,GAAC,CAAhB,EAAmB;AAAC,0BACpB,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAIQ,KAAhB;AAAuB,QAAA,EAAE,EAAID,IAA7B;AAAmC,QAAA,KAAK,EAAI;AAACJ,UAAAA,KAAK,EAAE,OAAR;AAAiBC,UAAAA,UAAU,EAAE,eAA7B;AAA8CC,UAAAA,cAAc,EAAE;AAA9D,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAuHxB,WAAW,CAACW,SAAS,CAACgB,KAAD,CAAV,CAAlI,CADoB;AAElB,KAFF,MAEQ,OAAO,IAAP;AACf,GAJA,CAFF,QAOI3B,WAAW,CAACW,SAAS,CAACQ,CAAC,GAAC,CAAH,CAAV,CAPf,CAAP;AASH,CAvBD;;AAyBA,eAAeV,WAAf","sourcesContent":["import React from 'react'\nimport { NavLink } from \"react-router-dom\"\nimport * as Constants from '../constants';\nimport '../App.css';\n\n\nconst makeSlovene = (word) => {\n\n    let sWord = '';\n    \n    for(let i=0; i < Constants.breadCrumbsConsts.length; i++) {\n        (word === Constants.breadCrumbsConsts[i].value) && (sWord = Constants.breadCrumbsConsts[i].label)\n        if(word.includes('conversation?')) {\n            \n        }\n    }\n\n    return sWord;\n}\n\n\nconst BreadCrumbs = (props) => {\n\n    let linksplit = props.pathname.substr(1).split('/');\n\n    let links = new Array(linksplit.length).fill('');\n\n    for (let i = 0; i < linksplit.length; i++) {\n        for (let j = 0; j <= i; j++) {\n            links[i] += '/' + linksplit[j]\n        }\n    }\n\n    let n = links.length;\n\n    return <div style = {{textAlign: 'left', padding: '20px', color: 'white', textShadow: '1px 1px black'}}>\n            <NavLink to = '/' style = {{color: 'white', textShadow: '1px 1px black', textDecoration: 'none'}}>domov</NavLink>\n            {links.map((link, index) => {\n                    if (index !== n-1) {return (\n                    <NavLink key = {index} to = {link} style = {{color: 'white', textShadow: '1px 1px black', textDecoration: 'none'}}> > {makeSlovene(linksplit[index])}</NavLink>\n                    )} else return null\n            })}\n            > {makeSlovene(linksplit[n-1])}\n    </div>\n}\n\nexport default BreadCrumbs"]},"metadata":{},"sourceType":"module"}